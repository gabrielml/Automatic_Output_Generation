#!/usr/bin/env python3

import json
import locale
import sys
import collections
import functools
import operator


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.
  Returns a list of lines that summarize the information.
  """
  # Varibles
  full_summary = []

  most_revenue = max_revenue(data)
  most_sales = best_seller_car(data)
  most_popular_year = best_year(data)

  full_summary.extend([most_revenue, most_sales, most_popular_year])

  # max_revenue = {"revenue": 0}
  # for item in data:
  #   # Calculate the revenue generated by this model (price * total_sales)
  #   # We need to convert the price from "$1234.56" to 1234.56
  #   item_price = locale.atof(item["price"].strip("$"))
  #   item_revenue = item["total_sales"] * item_price
  #   if item_revenue > max_revenue["revenue"]:
  #     item["revenue"] = item_revenue
  #     max_revenue = item
  #   # TODO: also handle max sales
  #   # TODO: also handle most popular car_year

  # summary = [
  #   "The {} generated the most revenue: ${}".format(
  #     format_car(max_revenue["car"]), max_revenue["revenue"]),
  # ]

  return full_summary


def max_revenue(monthly_car_sales):
    """1. Calculate the car model with the most revenue"""
    # Variables
    max_revenue = {"revenue": 0}
    for car in monthly_car_sales:
        # Calculate the revenue generated by this model (price * total_sales)
		# (!) We need to convert the price from "$1234.56" to 1234.56
        car_price = locale.atof(car["price"].strip("$"))
        car_revenue = car_price * car["total_sales"]
        if car_revenue > max_revenue["revenue"]:
            car["revenue"] = car_revenue
            max_revenue = car

    summary = [
        "The {} generated the most revenue: ${}".format(
            format_car(max_revenue["car"]), max_revenue["revenue"])
    ]
    return summary


def best_seller_car(data):
	"""2. Calculate the car model which had the most sales"""
	sorted_sales = sorted(data, key=lambda i: i["total_sales"], reverse=True)
	best_seller = sorted_sales[0]

	summary = [
		"The {} had the most sales: {}".format(format_car(best_seller["car"]), best_seller["total_sales"])
	]

	return summary

def best_year(raw_data):
  """3. Calculate the best sales year for all car models together"""
  # Sales by year for every single car.
  # E.g. <Acura>{'2004': 100}, <Honda>{'2004': 50}
  filtered_data = list(map(selected_values, raw_data))

  # Total sales by year
  # E.g. <Acura + Honda> {'2004': 150}
  sales_by_year = dict(functools.reduce(operator.add, map(collections.Counter, filtered_data)))

  # Years sorted by sales in descending order
  desc_sales = dict(sorted(sales_by_year.items(), key=operator.itemgetter(1), reverse=True))

  # Recover the Year with the best car sales
  best_sales_year = list(desc_sales.items())[0] # Complexity would be O(n)[O(ok)]

  summary = [
    "The most popular year was {} with {} sales.".format(best_sales_year[0], best_sales_year[1])
  ]
  return summary


def selected_values(item):
  """3.1. Returns a dictionary with the total of all cars sold in a given year"""
  key = str(item["car"]["car_year"])
  value = item["total_sales"]
  new_item = { key : value }

  return new_item


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  print(type(summary))
  # TODO: turn this into a PDF report

  # TODO: send the PDF report as an email attachment


if __name__ == "__main__":
  main(sys.argv)